/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { H5PService } from "../h5P.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { H5PCreateInput } from "./H5PCreateInput";
import { H5P } from "./H5P";
import { H5PFindManyArgs } from "./H5PFindManyArgs";
import { H5PWhereUniqueInput } from "./H5PWhereUniqueInput";
import { H5PUpdateInput } from "./H5PUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class H5PControllerBase {
  constructor(
    protected readonly service: H5PService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: H5P })
  @nestAccessControl.UseRoles({
    resource: "H5P",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createH5P(@common.Body() data: H5PCreateInput): Promise<H5P> {
    return await this.service.createH5P({
      data: data,
      select: {
        accessibility: true,
        createdAt: true,
        description: true,
        discipline: true,
        id: true,
        language: true,
        learningOutcomes: true,
        owner: true,
        subject: true,
        title: true,
        topic: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [H5P] })
  @ApiNestedQuery(H5PFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "H5P",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async h5PS(@common.Req() request: Request): Promise<H5P[]> {
    const args = plainToClass(H5PFindManyArgs, request.query);
    return this.service.h5PS({
      ...args,
      select: {
        accessibility: true,
        createdAt: true,
        description: true,
        discipline: true,
        id: true,
        language: true,
        learningOutcomes: true,
        owner: true,
        subject: true,
        title: true,
        topic: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: H5P })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "H5P",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async h5P(@common.Param() params: H5PWhereUniqueInput): Promise<H5P | null> {
    const result = await this.service.h5P({
      where: params,
      select: {
        accessibility: true,
        createdAt: true,
        description: true,
        discipline: true,
        id: true,
        language: true,
        learningOutcomes: true,
        owner: true,
        subject: true,
        title: true,
        topic: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: H5P })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "H5P",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateH5P(
    @common.Param() params: H5PWhereUniqueInput,
    @common.Body() data: H5PUpdateInput
  ): Promise<H5P | null> {
    try {
      return await this.service.updateH5P({
        where: params,
        data: data,
        select: {
          accessibility: true,
          createdAt: true,
          description: true,
          discipline: true,
          id: true,
          language: true,
          learningOutcomes: true,
          owner: true,
          subject: true,
          title: true,
          topic: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: H5P })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "H5P",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteH5P(
    @common.Param() params: H5PWhereUniqueInput
  ): Promise<H5P | null> {
    try {
      return await this.service.deleteH5P({
        where: params,
        select: {
          accessibility: true,
          createdAt: true,
          description: true,
          discipline: true,
          id: true,
          language: true,
          learningOutcomes: true,
          owner: true,
          subject: true,
          title: true,
          topic: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
