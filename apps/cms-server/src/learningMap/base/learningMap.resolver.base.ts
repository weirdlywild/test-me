/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LearningMap } from "./LearningMap";
import { LearningMapCountArgs } from "./LearningMapCountArgs";
import { LearningMapFindManyArgs } from "./LearningMapFindManyArgs";
import { LearningMapFindUniqueArgs } from "./LearningMapFindUniqueArgs";
import { CreateLearningMapArgs } from "./CreateLearningMapArgs";
import { UpdateLearningMapArgs } from "./UpdateLearningMapArgs";
import { DeleteLearningMapArgs } from "./DeleteLearningMapArgs";
import { LearningMapService } from "../learningMap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LearningMap)
export class LearningMapResolverBase {
  constructor(
    protected readonly service: LearningMapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LearningMap",
    action: "read",
    possession: "any",
  })
  async _learningMapsMeta(
    @graphql.Args() args: LearningMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LearningMap])
  @nestAccessControl.UseRoles({
    resource: "LearningMap",
    action: "read",
    possession: "any",
  })
  async learningMaps(
    @graphql.Args() args: LearningMapFindManyArgs
  ): Promise<LearningMap[]> {
    return this.service.learningMaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LearningMap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LearningMap",
    action: "read",
    possession: "own",
  })
  async learningMap(
    @graphql.Args() args: LearningMapFindUniqueArgs
  ): Promise<LearningMap | null> {
    const result = await this.service.learningMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LearningMap)
  @nestAccessControl.UseRoles({
    resource: "LearningMap",
    action: "create",
    possession: "any",
  })
  async createLearningMap(
    @graphql.Args() args: CreateLearningMapArgs
  ): Promise<LearningMap> {
    return await this.service.createLearningMap({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LearningMap)
  @nestAccessControl.UseRoles({
    resource: "LearningMap",
    action: "update",
    possession: "any",
  })
  async updateLearningMap(
    @graphql.Args() args: UpdateLearningMapArgs
  ): Promise<LearningMap | null> {
    try {
      return await this.service.updateLearningMap({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LearningMap)
  @nestAccessControl.UseRoles({
    resource: "LearningMap",
    action: "delete",
    possession: "any",
  })
  async deleteLearningMap(
    @graphql.Args() args: DeleteLearningMapArgs
  ): Promise<LearningMap | null> {
    try {
      return await this.service.deleteLearningMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
