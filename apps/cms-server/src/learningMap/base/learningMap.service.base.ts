/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LearningMap as PrismaLearningMap } from "@prisma/client";

export class LearningMapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LearningMapCountArgs, "select">
  ): Promise<number> {
    return this.prisma.learningMap.count(args);
  }

  async learningMaps<T extends Prisma.LearningMapFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningMapFindManyArgs>
  ): Promise<PrismaLearningMap[]> {
    return this.prisma.learningMap.findMany<Prisma.LearningMapFindManyArgs>(
      args
    );
  }
  async learningMap<T extends Prisma.LearningMapFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningMapFindUniqueArgs>
  ): Promise<PrismaLearningMap | null> {
    return this.prisma.learningMap.findUnique(args);
  }
  async createLearningMap<T extends Prisma.LearningMapCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningMapCreateArgs>
  ): Promise<PrismaLearningMap> {
    return this.prisma.learningMap.create<T>(args);
  }
  async updateLearningMap<T extends Prisma.LearningMapUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningMapUpdateArgs>
  ): Promise<PrismaLearningMap> {
    return this.prisma.learningMap.update<T>(args);
  }
  async deleteLearningMap<T extends Prisma.LearningMapDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LearningMapDeleteArgs>
  ): Promise<PrismaLearningMap> {
    return this.prisma.learningMap.delete(args);
  }
}
